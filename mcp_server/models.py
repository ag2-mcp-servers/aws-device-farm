# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:32:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AWSAccountNumber(RootModel[constr(min_length=2, max_length=16)]):
    root: constr(min_length=2, max_length=16)


class AccountsCleanup(RootModel[bool]):
    root: bool


class AmazonResourceName(
    RootModel[constr(pattern=r'^arn:.+', min_length=32, max_length=1011)]
):
    root: constr(pattern=r'^arn:.+', min_length=32, max_length=1011)


class AmazonResourceNames(RootModel[List[AmazonResourceName]]):
    root: List[AmazonResourceName]


class AppPackagesCleanup(RootModel[bool]):
    root: bool


class ArgumentException(RootModel[Any]):
    root: Any


class ArtifactCategory(Enum):
    SCREENSHOT = 'SCREENSHOT'
    FILE = 'FILE'
    LOG = 'LOG'


class ArtifactType(Enum):
    UNKNOWN = 'UNKNOWN'
    SCREENSHOT = 'SCREENSHOT'
    DEVICE_LOG = 'DEVICE_LOG'
    MESSAGE_LOG = 'MESSAGE_LOG'
    VIDEO_LOG = 'VIDEO_LOG'
    RESULT_LOG = 'RESULT_LOG'
    SERVICE_LOG = 'SERVICE_LOG'
    WEBKIT_LOG = 'WEBKIT_LOG'
    INSTRUMENTATION_OUTPUT = 'INSTRUMENTATION_OUTPUT'
    EXERCISER_MONKEY_OUTPUT = 'EXERCISER_MONKEY_OUTPUT'
    CALABASH_JSON_OUTPUT = 'CALABASH_JSON_OUTPUT'
    CALABASH_PRETTY_OUTPUT = 'CALABASH_PRETTY_OUTPUT'
    CALABASH_STANDARD_OUTPUT = 'CALABASH_STANDARD_OUTPUT'
    CALABASH_JAVA_XML_OUTPUT = 'CALABASH_JAVA_XML_OUTPUT'
    AUTOMATION_OUTPUT = 'AUTOMATION_OUTPUT'
    APPIUM_SERVER_OUTPUT = 'APPIUM_SERVER_OUTPUT'
    APPIUM_JAVA_OUTPUT = 'APPIUM_JAVA_OUTPUT'
    APPIUM_JAVA_XML_OUTPUT = 'APPIUM_JAVA_XML_OUTPUT'
    APPIUM_PYTHON_OUTPUT = 'APPIUM_PYTHON_OUTPUT'
    APPIUM_PYTHON_XML_OUTPUT = 'APPIUM_PYTHON_XML_OUTPUT'
    EXPLORER_EVENT_LOG = 'EXPLORER_EVENT_LOG'
    EXPLORER_SUMMARY_LOG = 'EXPLORER_SUMMARY_LOG'
    APPLICATION_CRASH_REPORT = 'APPLICATION_CRASH_REPORT'
    XCTEST_LOG = 'XCTEST_LOG'
    VIDEO = 'VIDEO'
    CUSTOMER_ARTIFACT = 'CUSTOMER_ARTIFACT'
    CUSTOMER_ARTIFACT_LOG = 'CUSTOMER_ARTIFACT_LOG'
    TESTSPEC_OUTPUT = 'TESTSPEC_OUTPUT'


class BillingMethod(Enum):
    METERED = 'METERED'
    UNMETERED = 'UNMETERED'


class Boolean(RootModel[bool]):
    root: bool


class CannotDeleteException(RootModel[Any]):
    root: Any


class ClientId(RootModel[constr(min_length=0, max_length=64)]):
    root: constr(min_length=0, max_length=64)


class ContentType(RootModel[constr(min_length=0, max_length=64)]):
    root: constr(min_length=0, max_length=64)


class CreateRemoteAccessSessionConfiguration(BaseModel):
    billingMethod: Optional[BillingMethod] = None
    vpceConfigurationArns: Optional[AmazonResourceNames] = None


class CurrencyCode(Enum):
    USD = 'USD'


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteDevicePoolRequest(BaseModel):
    arn: AmazonResourceName


class DeleteDevicePoolResult(BaseModel):
    pass


class DeleteInstanceProfileRequest(BaseModel):
    arn: AmazonResourceName


class DeleteInstanceProfileResult(BaseModel):
    pass


class DeleteNetworkProfileRequest(BaseModel):
    arn: AmazonResourceName


class DeleteNetworkProfileResult(BaseModel):
    pass


class DeleteProjectRequest(BaseModel):
    arn: AmazonResourceName


class DeleteProjectResult(BaseModel):
    pass


class DeleteRemoteAccessSessionRequest(BaseModel):
    arn: AmazonResourceName


class DeleteRemoteAccessSessionResult(BaseModel):
    pass


class DeleteRunRequest(BaseModel):
    arn: AmazonResourceName


class DeleteRunResult(BaseModel):
    pass


class DeleteTestGridProjectResult(BaseModel):
    pass


class DeleteUploadRequest(BaseModel):
    arn: AmazonResourceName


class DeleteUploadResult(BaseModel):
    pass


class DeleteVPCEConfigurationRequest(BaseModel):
    arn: AmazonResourceName


class DeleteVPCEConfigurationResult(BaseModel):
    pass


class DeviceAttribute(Enum):
    ARN = 'ARN'
    PLATFORM = 'PLATFORM'
    FORM_FACTOR = 'FORM_FACTOR'
    MANUFACTURER = 'MANUFACTURER'
    REMOTE_ACCESS_ENABLED = 'REMOTE_ACCESS_ENABLED'
    REMOTE_DEBUG_ENABLED = 'REMOTE_DEBUG_ENABLED'
    APPIUM_VERSION = 'APPIUM_VERSION'
    INSTANCE_ARN = 'INSTANCE_ARN'
    INSTANCE_LABELS = 'INSTANCE_LABELS'
    FLEET_TYPE = 'FLEET_TYPE'
    OS_VERSION = 'OS_VERSION'
    MODEL = 'MODEL'
    AVAILABILITY = 'AVAILABILITY'


class DeviceAvailability(Enum):
    TEMPORARY_NOT_AVAILABLE = 'TEMPORARY_NOT_AVAILABLE'
    BUSY = 'BUSY'
    AVAILABLE = 'AVAILABLE'
    HIGHLY_AVAILABLE = 'HIGHLY_AVAILABLE'


class DeviceFarmArn(
    RootModel[constr(pattern=r'^arn:aws:devicefarm:.+', min_length=32, max_length=1011)]
):
    root: constr(pattern=r'^arn:aws:devicefarm:.+', min_length=32, max_length=1011)


class DeviceFilterAttribute(Enum):
    ARN = 'ARN'
    PLATFORM = 'PLATFORM'
    OS_VERSION = 'OS_VERSION'
    MODEL = 'MODEL'
    AVAILABILITY = 'AVAILABILITY'
    FORM_FACTOR = 'FORM_FACTOR'
    MANUFACTURER = 'MANUFACTURER'
    REMOTE_ACCESS_ENABLED = 'REMOTE_ACCESS_ENABLED'
    REMOTE_DEBUG_ENABLED = 'REMOTE_DEBUG_ENABLED'
    INSTANCE_ARN = 'INSTANCE_ARN'
    INSTANCE_LABELS = 'INSTANCE_LABELS'
    FLEET_TYPE = 'FLEET_TYPE'


class DeviceFormFactor(Enum):
    PHONE = 'PHONE'
    TABLET = 'TABLET'


class DevicePlatform(Enum):
    ANDROID = 'ANDROID'
    IOS = 'IOS'


class DevicePoolType(Enum):
    CURATED = 'CURATED'
    PRIVATE = 'PRIVATE'


class Double(RootModel[float]):
    root: float


class ExecutionResult(Enum):
    PENDING = 'PENDING'
    PASSED = 'PASSED'
    WARNED = 'WARNED'
    FAILED = 'FAILED'
    SKIPPED = 'SKIPPED'
    ERRORED = 'ERRORED'
    STOPPED = 'STOPPED'


class ExecutionResultCode(Enum):
    PARSING_FAILED = 'PARSING_FAILED'
    VPC_ENDPOINT_SETUP_FAILED = 'VPC_ENDPOINT_SETUP_FAILED'


class ExecutionStatus(Enum):
    PENDING = 'PENDING'
    PENDING_CONCURRENCY = 'PENDING_CONCURRENCY'
    PENDING_DEVICE = 'PENDING_DEVICE'
    PROCESSING = 'PROCESSING'
    SCHEDULING = 'SCHEDULING'
    PREPARING = 'PREPARING'
    RUNNING = 'RUNNING'
    COMPLETED = 'COMPLETED'
    STOPPING = 'STOPPING'


class Filter(RootModel[constr(min_length=0, max_length=8192)]):
    root: constr(min_length=0, max_length=8192)


class GetAccountSettingsRequest(BaseModel):
    pass


class GetDeviceInstanceRequest(BaseModel):
    arn: AmazonResourceName


class GetDevicePoolRequest(BaseModel):
    arn: AmazonResourceName


class GetDeviceRequest(BaseModel):
    arn: AmazonResourceName


class GetInstanceProfileRequest(BaseModel):
    arn: AmazonResourceName


class GetJobRequest(BaseModel):
    arn: AmazonResourceName


class GetNetworkProfileRequest(BaseModel):
    arn: AmazonResourceName


class GetProjectRequest(BaseModel):
    arn: AmazonResourceName


class GetRemoteAccessSessionRequest(BaseModel):
    arn: AmazonResourceName


class GetRunRequest(BaseModel):
    arn: AmazonResourceName


class GetSuiteRequest(BaseModel):
    arn: AmazonResourceName


class GetTestGridProjectRequest(BaseModel):
    projectArn: DeviceFarmArn


class GetTestRequest(BaseModel):
    arn: AmazonResourceName


class GetUploadRequest(BaseModel):
    arn: AmazonResourceName


class GetVPCEConfigurationRequest(BaseModel):
    arn: AmazonResourceName


class HostAddress(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class IdempotencyException(RootModel[Any]):
    root: Any


class InstallToRemoteAccessSessionRequest(BaseModel):
    appArn: AmazonResourceName
    remoteAccessSessionArn: AmazonResourceName


class InstanceStatus(Enum):
    IN_USE = 'IN_USE'
    PREPARING = 'PREPARING'
    AVAILABLE = 'AVAILABLE'
    NOT_AVAILABLE = 'NOT_AVAILABLE'


class Integer(RootModel[int]):
    root: int


class InteractionMode(Enum):
    INTERACTIVE = 'INTERACTIVE'
    NO_VIDEO = 'NO_VIDEO'
    VIDEO_ONLY = 'VIDEO_ONLY'


class InternalServiceException(RootModel[Any]):
    root: Any


class InvalidOperationException(RootModel[Any]):
    root: Any


class JobTimeoutMinutes(RootModel[int]):
    root: int


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: DeviceFarmArn


class Location(BaseModel):
    latitude: Double
    longitude: Double


class Long(RootModel[int]):
    root: int


class MaxPageSize(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxSlotMap(RootModel[Optional[Dict[str, Integer]]]):
    root: Optional[Dict[str, Integer]] = None


class Message(RootModel[constr(min_length=0, max_length=16384)]):
    root: constr(min_length=0, max_length=16384)


class Metadata(RootModel[constr(min_length=0, max_length=8192)]):
    root: constr(min_length=0, max_length=8192)


class MonetaryAmount(BaseModel):
    amount: Optional[Double] = None
    currencyCode: Optional[CurrencyCode] = None


class Name(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class NetworkProfileType(Enum):
    CURATED = 'CURATED'
    PRIVATE = 'PRIVATE'


class NonEmptyString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=4096)


class NotEligibleException(RootModel[Any]):
    root: Any


class NotFoundException(RootModel[Any]):
    root: Any


class OfferingIdentifier(RootModel[constr(min_length=32)]):
    root: constr(min_length=32)


class OfferingPromotionIdentifier(RootModel[constr(min_length=4)]):
    root: constr(min_length=4)


class OfferingTransactionType(Enum):
    PURCHASE = 'PURCHASE'
    RENEW = 'RENEW'
    SYSTEM = 'SYSTEM'


class OfferingType(Enum):
    RECURRING = 'RECURRING'


class PaginationToken(RootModel[constr(min_length=4, max_length=1024)]):
    root: constr(min_length=4, max_length=1024)


class PercentInteger(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class ProblemDetail(BaseModel):
    arn: Optional[AmazonResourceName] = None
    name: Optional[Name] = None


class PurchaseOfferingRequest(BaseModel):
    offeringId: OfferingIdentifier
    offeringPromotionId: Optional[OfferingPromotionIdentifier] = None
    quantity: Integer


class PurchasedDevicesMap(RootModel[Optional[Dict[str, Integer]]]):
    root: Optional[Dict[str, Integer]] = None


class Radios(BaseModel):
    bluetooth: Optional[Boolean] = None
    gps: Optional[Boolean] = None
    nfc: Optional[Boolean] = None
    wifi: Optional[Boolean] = None


class RecurringChargeFrequency(Enum):
    MONTHLY = 'MONTHLY'


class RenewOfferingRequest(BaseModel):
    offeringId: OfferingIdentifier
    quantity: Integer


class Resolution(BaseModel):
    height: Optional[Integer] = None
    width: Optional[Integer] = None


class ResourceDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class ResourceId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class ResourceName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=64)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=64)


class RuleOperator(Enum):
    EQUALS = 'EQUALS'
    LESS_THAN = 'LESS_THAN'
    LESS_THAN_OR_EQUALS = 'LESS_THAN_OR_EQUALS'
    GREATER_THAN = 'GREATER_THAN'
    GREATER_THAN_OR_EQUALS = 'GREATER_THAN_OR_EQUALS'
    IN = 'IN'
    NOT_IN = 'NOT_IN'
    CONTAINS = 'CONTAINS'


class SampleType(Enum):
    CPU = 'CPU'
    MEMORY = 'MEMORY'
    THREADS = 'THREADS'
    RX_RATE = 'RX_RATE'
    TX_RATE = 'TX_RATE'
    RX = 'RX'
    TX = 'TX'
    NATIVE_FRAMES = 'NATIVE_FRAMES'
    NATIVE_FPS = 'NATIVE_FPS'
    NATIVE_MIN_DRAWTIME = 'NATIVE_MIN_DRAWTIME'
    NATIVE_AVG_DRAWTIME = 'NATIVE_AVG_DRAWTIME'
    NATIVE_MAX_DRAWTIME = 'NATIVE_MAX_DRAWTIME'
    OPENGL_FRAMES = 'OPENGL_FRAMES'
    OPENGL_FPS = 'OPENGL_FPS'
    OPENGL_MIN_DRAWTIME = 'OPENGL_MIN_DRAWTIME'
    OPENGL_AVG_DRAWTIME = 'OPENGL_AVG_DRAWTIME'
    OPENGL_MAX_DRAWTIME = 'OPENGL_MAX_DRAWTIME'


class SecurityGroupId(
    RootModel[constr(pattern=r'^sg-[0-9a-fA-F]{8,}$', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'^sg-[0-9a-fA-F]{8,}$', min_length=1, max_length=4096)


class SecurityGroupIds(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., max_length=5, min_length=1)


class SensitiveString(RootModel[SecretStr]):
    root: SecretStr


class SensitiveURL(RootModel[SecretStr]):
    root: SecretStr


class ServiceAccountException(RootModel[Any]):
    root: Any


class ServiceDnsName(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class SkipAppResign(RootModel[bool]):
    root: bool


class SshPublicKey(RootModel[constr(min_length=0, max_length=8192)]):
    root: constr(min_length=0, max_length=8192)


class StopJobRequest(BaseModel):
    arn: AmazonResourceName


class StopRemoteAccessSessionRequest(BaseModel):
    arn: AmazonResourceName


class StopRunRequest(BaseModel):
    arn: AmazonResourceName


class String(RootModel[str]):
    root: str


class SubnetId(
    RootModel[
        constr(pattern=r'^subnet-[0-9a-fA-F]{8,}$', min_length=1, max_length=4096)
    ]
):
    root: constr(pattern=r'^subnet-[0-9a-fA-F]{8,}$', min_length=1, max_length=4096)


class SubnetIds(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., max_length=8, min_length=1)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=150)


class TagOperationException(RootModel[Any]):
    root: Any


class TagPolicyException(RootModel[Any]):
    root: Any


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TestGridSessionAction(BaseModel):
    action: Optional[String] = None
    duration: Optional[Long] = None
    requestMethod: Optional[String] = None
    started: Optional[DateTime] = None
    statusCode: Optional[String] = None


class TestGridSessionActions(RootModel[List[TestGridSessionAction]]):
    root: List[TestGridSessionAction]


class TestGridSessionArtifactCategory(Enum):
    VIDEO = 'VIDEO'
    LOG = 'LOG'


class TestGridSessionArtifactType(Enum):
    UNKNOWN = 'UNKNOWN'
    VIDEO = 'VIDEO'
    SELENIUM_LOG = 'SELENIUM_LOG'


class TestGridSessionStatus(Enum):
    ACTIVE = 'ACTIVE'
    CLOSED = 'CLOSED'
    ERRORED = 'ERRORED'


class TestGridUrlExpiresInSecondsInput(RootModel[conint(ge=60, le=86400)]):
    root: conint(ge=60, le=86400)


class TestGridVpcConfig(BaseModel):
    securityGroupIds: SecurityGroupIds
    subnetIds: SubnetIds
    vpcId: NonEmptyString


class TestParameters(RootModel[Optional[Dict[str, String]]]):
    root: Optional[Dict[str, String]] = None


class TestType(Enum):
    BUILTIN_FUZZ = 'BUILTIN_FUZZ'
    BUILTIN_EXPLORER = 'BUILTIN_EXPLORER'
    WEB_PERFORMANCE_PROFILE = 'WEB_PERFORMANCE_PROFILE'
    APPIUM_JAVA_JUNIT = 'APPIUM_JAVA_JUNIT'
    APPIUM_JAVA_TESTNG = 'APPIUM_JAVA_TESTNG'
    APPIUM_PYTHON = 'APPIUM_PYTHON'
    APPIUM_NODE = 'APPIUM_NODE'
    APPIUM_RUBY = 'APPIUM_RUBY'
    APPIUM_WEB_JAVA_JUNIT = 'APPIUM_WEB_JAVA_JUNIT'
    APPIUM_WEB_JAVA_TESTNG = 'APPIUM_WEB_JAVA_TESTNG'
    APPIUM_WEB_PYTHON = 'APPIUM_WEB_PYTHON'
    APPIUM_WEB_NODE = 'APPIUM_WEB_NODE'
    APPIUM_WEB_RUBY = 'APPIUM_WEB_RUBY'
    CALABASH = 'CALABASH'
    INSTRUMENTATION = 'INSTRUMENTATION'
    UIAUTOMATION = 'UIAUTOMATION'
    UIAUTOMATOR = 'UIAUTOMATOR'
    XCTEST = 'XCTEST'
    XCTEST_UI = 'XCTEST_UI'
    REMOTE_ACCESS_RECORD = 'REMOTE_ACCESS_RECORD'
    REMOTE_ACCESS_REPLAY = 'REMOTE_ACCESS_REPLAY'


class TooManyTagsException(RootModel[Any]):
    root: Any


class TransactionIdentifier(RootModel[constr(min_length=32)]):
    root: constr(min_length=32)


class TrialMinutes(BaseModel):
    remaining: Optional[Double] = None
    total: Optional[Double] = None


class URL(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class UntagResourceRequest(BaseModel):
    ResourceARN: DeviceFarmArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateNetworkProfileRequest(BaseModel):
    arn: AmazonResourceName
    description: Optional[Message] = None
    downlinkBandwidthBits: Optional[Long] = None
    downlinkDelayMs: Optional[Long] = None
    downlinkJitterMs: Optional[Long] = None
    downlinkLossPercent: Optional[PercentInteger] = None
    name: Optional[Name] = None
    type: Optional[NetworkProfileType] = None
    uplinkBandwidthBits: Optional[Long] = None
    uplinkDelayMs: Optional[Long] = None
    uplinkJitterMs: Optional[Long] = None
    uplinkLossPercent: Optional[PercentInteger] = None


class UpdateTestGridProjectRequest(BaseModel):
    description: Optional[ResourceDescription] = None
    name: Optional[ResourceName] = None
    projectArn: DeviceFarmArn
    vpcConfig: Optional[TestGridVpcConfig] = None


class UpdateUploadRequest(BaseModel):
    arn: AmazonResourceName
    contentType: Optional[ContentType] = None
    editContent: Optional[Boolean] = None
    name: Optional[Name] = None


class UploadCategory(Enum):
    CURATED = 'CURATED'
    PRIVATE = 'PRIVATE'


class UploadStatus(Enum):
    INITIALIZED = 'INITIALIZED'
    PROCESSING = 'PROCESSING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class UploadType(Enum):
    ANDROID_APP = 'ANDROID_APP'
    IOS_APP = 'IOS_APP'
    WEB_APP = 'WEB_APP'
    EXTERNAL_DATA = 'EXTERNAL_DATA'
    APPIUM_JAVA_JUNIT_TEST_PACKAGE = 'APPIUM_JAVA_JUNIT_TEST_PACKAGE'
    APPIUM_JAVA_TESTNG_TEST_PACKAGE = 'APPIUM_JAVA_TESTNG_TEST_PACKAGE'
    APPIUM_PYTHON_TEST_PACKAGE = 'APPIUM_PYTHON_TEST_PACKAGE'
    APPIUM_NODE_TEST_PACKAGE = 'APPIUM_NODE_TEST_PACKAGE'
    APPIUM_RUBY_TEST_PACKAGE = 'APPIUM_RUBY_TEST_PACKAGE'
    APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 'APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE'
    APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 'APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE'
    APPIUM_WEB_PYTHON_TEST_PACKAGE = 'APPIUM_WEB_PYTHON_TEST_PACKAGE'
    APPIUM_WEB_NODE_TEST_PACKAGE = 'APPIUM_WEB_NODE_TEST_PACKAGE'
    APPIUM_WEB_RUBY_TEST_PACKAGE = 'APPIUM_WEB_RUBY_TEST_PACKAGE'
    CALABASH_TEST_PACKAGE = 'CALABASH_TEST_PACKAGE'
    INSTRUMENTATION_TEST_PACKAGE = 'INSTRUMENTATION_TEST_PACKAGE'
    UIAUTOMATION_TEST_PACKAGE = 'UIAUTOMATION_TEST_PACKAGE'
    UIAUTOMATOR_TEST_PACKAGE = 'UIAUTOMATOR_TEST_PACKAGE'
    XCTEST_TEST_PACKAGE = 'XCTEST_TEST_PACKAGE'
    XCTEST_UI_TEST_PACKAGE = 'XCTEST_UI_TEST_PACKAGE'
    APPIUM_JAVA_JUNIT_TEST_SPEC = 'APPIUM_JAVA_JUNIT_TEST_SPEC'
    APPIUM_JAVA_TESTNG_TEST_SPEC = 'APPIUM_JAVA_TESTNG_TEST_SPEC'
    APPIUM_PYTHON_TEST_SPEC = 'APPIUM_PYTHON_TEST_SPEC'
    APPIUM_NODE_TEST_SPEC = 'APPIUM_NODE_TEST_SPEC'
    APPIUM_RUBY_TEST_SPEC = 'APPIUM_RUBY_TEST_SPEC'
    APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 'APPIUM_WEB_JAVA_JUNIT_TEST_SPEC'
    APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 'APPIUM_WEB_JAVA_TESTNG_TEST_SPEC'
    APPIUM_WEB_PYTHON_TEST_SPEC = 'APPIUM_WEB_PYTHON_TEST_SPEC'
    APPIUM_WEB_NODE_TEST_SPEC = 'APPIUM_WEB_NODE_TEST_SPEC'
    APPIUM_WEB_RUBY_TEST_SPEC = 'APPIUM_WEB_RUBY_TEST_SPEC'
    INSTRUMENTATION_TEST_SPEC = 'INSTRUMENTATION_TEST_SPEC'
    XCTEST_UI_TEST_SPEC = 'XCTEST_UI_TEST_SPEC'


class VPCEConfigurationDescription(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class VPCEConfigurationName(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class VPCEServiceName(RootModel[constr(min_length=0, max_length=2048)]):
    root: constr(min_length=0, max_length=2048)


class VideoCapture(RootModel[bool]):
    root: bool


class VpcSecurityGroupIds(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId] = Field(..., max_length=5, min_length=1)


class VpcSubnetIds(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=8, min_length=1)


class XAmzTarget(Enum):
    DeviceFarm_20150623_CreateDevicePool = 'DeviceFarm_20150623.CreateDevicePool'


class XAmzTarget1(Enum):
    DeviceFarm_20150623_CreateInstanceProfile = (
        'DeviceFarm_20150623.CreateInstanceProfile'
    )


class XAmzTarget2(Enum):
    DeviceFarm_20150623_CreateNetworkProfile = (
        'DeviceFarm_20150623.CreateNetworkProfile'
    )


class XAmzTarget3(Enum):
    DeviceFarm_20150623_CreateProject = 'DeviceFarm_20150623.CreateProject'


class XAmzTarget4(Enum):
    DeviceFarm_20150623_CreateRemoteAccessSession = (
        'DeviceFarm_20150623.CreateRemoteAccessSession'
    )


class XAmzTarget5(Enum):
    DeviceFarm_20150623_CreateTestGridProject = (
        'DeviceFarm_20150623.CreateTestGridProject'
    )


class XAmzTarget6(Enum):
    DeviceFarm_20150623_CreateTestGridUrl = 'DeviceFarm_20150623.CreateTestGridUrl'


class XAmzTarget7(Enum):
    DeviceFarm_20150623_CreateUpload = 'DeviceFarm_20150623.CreateUpload'


class XAmzTarget8(Enum):
    DeviceFarm_20150623_CreateVPCEConfiguration = (
        'DeviceFarm_20150623.CreateVPCEConfiguration'
    )


class XAmzTarget9(Enum):
    DeviceFarm_20150623_DeleteDevicePool = 'DeviceFarm_20150623.DeleteDevicePool'


class XAmzTarget10(Enum):
    DeviceFarm_20150623_DeleteInstanceProfile = (
        'DeviceFarm_20150623.DeleteInstanceProfile'
    )


class XAmzTarget11(Enum):
    DeviceFarm_20150623_DeleteNetworkProfile = (
        'DeviceFarm_20150623.DeleteNetworkProfile'
    )


class XAmzTarget12(Enum):
    DeviceFarm_20150623_DeleteProject = 'DeviceFarm_20150623.DeleteProject'


class XAmzTarget13(Enum):
    DeviceFarm_20150623_DeleteRemoteAccessSession = (
        'DeviceFarm_20150623.DeleteRemoteAccessSession'
    )


class XAmzTarget14(Enum):
    DeviceFarm_20150623_DeleteRun = 'DeviceFarm_20150623.DeleteRun'


class XAmzTarget15(Enum):
    DeviceFarm_20150623_DeleteTestGridProject = (
        'DeviceFarm_20150623.DeleteTestGridProject'
    )


class XAmzTarget16(Enum):
    DeviceFarm_20150623_DeleteUpload = 'DeviceFarm_20150623.DeleteUpload'


class XAmzTarget17(Enum):
    DeviceFarm_20150623_DeleteVPCEConfiguration = (
        'DeviceFarm_20150623.DeleteVPCEConfiguration'
    )


class XAmzTarget18(Enum):
    DeviceFarm_20150623_GetAccountSettings = 'DeviceFarm_20150623.GetAccountSettings'


class XAmzTarget19(Enum):
    DeviceFarm_20150623_GetDevice = 'DeviceFarm_20150623.GetDevice'


class XAmzTarget20(Enum):
    DeviceFarm_20150623_GetDeviceInstance = 'DeviceFarm_20150623.GetDeviceInstance'


class XAmzTarget21(Enum):
    DeviceFarm_20150623_GetDevicePool = 'DeviceFarm_20150623.GetDevicePool'


class XAmzTarget22(Enum):
    DeviceFarm_20150623_GetDevicePoolCompatibility = (
        'DeviceFarm_20150623.GetDevicePoolCompatibility'
    )


class XAmzTarget23(Enum):
    DeviceFarm_20150623_GetInstanceProfile = 'DeviceFarm_20150623.GetInstanceProfile'


class XAmzTarget24(Enum):
    DeviceFarm_20150623_GetJob = 'DeviceFarm_20150623.GetJob'


class XAmzTarget25(Enum):
    DeviceFarm_20150623_GetNetworkProfile = 'DeviceFarm_20150623.GetNetworkProfile'


class XAmzTarget26(Enum):
    DeviceFarm_20150623_GetOfferingStatus = 'DeviceFarm_20150623.GetOfferingStatus'


class XAmzTarget27(Enum):
    DeviceFarm_20150623_GetProject = 'DeviceFarm_20150623.GetProject'


class XAmzTarget28(Enum):
    DeviceFarm_20150623_GetRemoteAccessSession = (
        'DeviceFarm_20150623.GetRemoteAccessSession'
    )


class XAmzTarget29(Enum):
    DeviceFarm_20150623_GetRun = 'DeviceFarm_20150623.GetRun'


class XAmzTarget30(Enum):
    DeviceFarm_20150623_GetSuite = 'DeviceFarm_20150623.GetSuite'


class XAmzTarget31(Enum):
    DeviceFarm_20150623_GetTest = 'DeviceFarm_20150623.GetTest'


class XAmzTarget32(Enum):
    DeviceFarm_20150623_GetTestGridProject = 'DeviceFarm_20150623.GetTestGridProject'


class XAmzTarget33(Enum):
    DeviceFarm_20150623_GetTestGridSession = 'DeviceFarm_20150623.GetTestGridSession'


class XAmzTarget34(Enum):
    DeviceFarm_20150623_GetUpload = 'DeviceFarm_20150623.GetUpload'


class XAmzTarget35(Enum):
    DeviceFarm_20150623_GetVPCEConfiguration = (
        'DeviceFarm_20150623.GetVPCEConfiguration'
    )


class XAmzTarget36(Enum):
    DeviceFarm_20150623_InstallToRemoteAccessSession = (
        'DeviceFarm_20150623.InstallToRemoteAccessSession'
    )


class XAmzTarget37(Enum):
    DeviceFarm_20150623_ListArtifacts = 'DeviceFarm_20150623.ListArtifacts'


class XAmzTarget38(Enum):
    DeviceFarm_20150623_ListDeviceInstances = 'DeviceFarm_20150623.ListDeviceInstances'


class XAmzTarget39(Enum):
    DeviceFarm_20150623_ListDevicePools = 'DeviceFarm_20150623.ListDevicePools'


class XAmzTarget40(Enum):
    DeviceFarm_20150623_ListDevices = 'DeviceFarm_20150623.ListDevices'


class XAmzTarget41(Enum):
    DeviceFarm_20150623_ListInstanceProfiles = (
        'DeviceFarm_20150623.ListInstanceProfiles'
    )


class XAmzTarget42(Enum):
    DeviceFarm_20150623_ListJobs = 'DeviceFarm_20150623.ListJobs'


class XAmzTarget43(Enum):
    DeviceFarm_20150623_ListNetworkProfiles = 'DeviceFarm_20150623.ListNetworkProfiles'


class XAmzTarget44(Enum):
    DeviceFarm_20150623_ListOfferingPromotions = (
        'DeviceFarm_20150623.ListOfferingPromotions'
    )


class XAmzTarget45(Enum):
    DeviceFarm_20150623_ListOfferingTransactions = (
        'DeviceFarm_20150623.ListOfferingTransactions'
    )


class XAmzTarget46(Enum):
    DeviceFarm_20150623_ListOfferings = 'DeviceFarm_20150623.ListOfferings'


class XAmzTarget47(Enum):
    DeviceFarm_20150623_ListProjects = 'DeviceFarm_20150623.ListProjects'


class XAmzTarget48(Enum):
    DeviceFarm_20150623_ListRemoteAccessSessions = (
        'DeviceFarm_20150623.ListRemoteAccessSessions'
    )


class XAmzTarget49(Enum):
    DeviceFarm_20150623_ListRuns = 'DeviceFarm_20150623.ListRuns'


class XAmzTarget50(Enum):
    DeviceFarm_20150623_ListSamples = 'DeviceFarm_20150623.ListSamples'


class XAmzTarget51(Enum):
    DeviceFarm_20150623_ListSuites = 'DeviceFarm_20150623.ListSuites'


class XAmzTarget52(Enum):
    DeviceFarm_20150623_ListTagsForResource = 'DeviceFarm_20150623.ListTagsForResource'


class XAmzTarget53(Enum):
    DeviceFarm_20150623_ListTestGridProjects = (
        'DeviceFarm_20150623.ListTestGridProjects'
    )


class XAmzTarget54(Enum):
    DeviceFarm_20150623_ListTestGridSessionActions = (
        'DeviceFarm_20150623.ListTestGridSessionActions'
    )


class XAmzTarget55(Enum):
    DeviceFarm_20150623_ListTestGridSessionArtifacts = (
        'DeviceFarm_20150623.ListTestGridSessionArtifacts'
    )


class XAmzTarget56(Enum):
    DeviceFarm_20150623_ListTestGridSessions = (
        'DeviceFarm_20150623.ListTestGridSessions'
    )


class XAmzTarget57(Enum):
    DeviceFarm_20150623_ListTests = 'DeviceFarm_20150623.ListTests'


class XAmzTarget58(Enum):
    DeviceFarm_20150623_ListUniqueProblems = 'DeviceFarm_20150623.ListUniqueProblems'


class XAmzTarget59(Enum):
    DeviceFarm_20150623_ListUploads = 'DeviceFarm_20150623.ListUploads'


class XAmzTarget60(Enum):
    DeviceFarm_20150623_ListVPCEConfigurations = (
        'DeviceFarm_20150623.ListVPCEConfigurations'
    )


class XAmzTarget61(Enum):
    DeviceFarm_20150623_PurchaseOffering = 'DeviceFarm_20150623.PurchaseOffering'


class XAmzTarget62(Enum):
    DeviceFarm_20150623_RenewOffering = 'DeviceFarm_20150623.RenewOffering'


class XAmzTarget63(Enum):
    DeviceFarm_20150623_ScheduleRun = 'DeviceFarm_20150623.ScheduleRun'


class XAmzTarget64(Enum):
    DeviceFarm_20150623_StopJob = 'DeviceFarm_20150623.StopJob'


class XAmzTarget65(Enum):
    DeviceFarm_20150623_StopRemoteAccessSession = (
        'DeviceFarm_20150623.StopRemoteAccessSession'
    )


class XAmzTarget66(Enum):
    DeviceFarm_20150623_StopRun = 'DeviceFarm_20150623.StopRun'


class XAmzTarget67(Enum):
    DeviceFarm_20150623_TagResource = 'DeviceFarm_20150623.TagResource'


class XAmzTarget68(Enum):
    DeviceFarm_20150623_UntagResource = 'DeviceFarm_20150623.UntagResource'


class XAmzTarget69(Enum):
    DeviceFarm_20150623_UpdateDeviceInstance = (
        'DeviceFarm_20150623.UpdateDeviceInstance'
    )


class XAmzTarget70(Enum):
    DeviceFarm_20150623_UpdateDevicePool = 'DeviceFarm_20150623.UpdateDevicePool'


class XAmzTarget71(Enum):
    DeviceFarm_20150623_UpdateInstanceProfile = (
        'DeviceFarm_20150623.UpdateInstanceProfile'
    )


class XAmzTarget72(Enum):
    DeviceFarm_20150623_UpdateNetworkProfile = (
        'DeviceFarm_20150623.UpdateNetworkProfile'
    )


class XAmzTarget73(Enum):
    DeviceFarm_20150623_UpdateProject = 'DeviceFarm_20150623.UpdateProject'


class XAmzTarget74(Enum):
    DeviceFarm_20150623_UpdateTestGridProject = (
        'DeviceFarm_20150623.UpdateTestGridProject'
    )


class XAmzTarget75(Enum):
    DeviceFarm_20150623_UpdateUpload = 'DeviceFarm_20150623.UpdateUpload'


class XAmzTarget76(Enum):
    DeviceFarm_20150623_UpdateVPCEConfiguration = (
        'DeviceFarm_20150623.UpdateVPCEConfiguration'
    )


class AccountSettings(BaseModel):
    awsAccountNumber: Optional[AWSAccountNumber] = None
    defaultJobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    maxJobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    maxSlots: Optional[MaxSlotMap] = None
    skipAppResign: Optional[SkipAppResign] = None
    trialMinutes: Optional[TrialMinutes] = None
    unmeteredDevices: Optional[PurchasedDevicesMap] = None
    unmeteredRemoteAccessDevices: Optional[PurchasedDevicesMap] = None


class AndroidPaths(RootModel[List[String]]):
    root: List[String]


class Artifact(BaseModel):
    arn: Optional[AmazonResourceName] = None
    extension: Optional[String] = None
    name: Optional[Name] = None
    type: Optional[ArtifactType] = None
    url: Optional[URL] = None


class Artifacts(RootModel[List[Artifact]]):
    root: List[Artifact]


class CPU(BaseModel):
    architecture: Optional[String] = None
    clock: Optional[Double] = None
    frequency: Optional[String] = None


class Counters(BaseModel):
    errored: Optional[Integer] = None
    failed: Optional[Integer] = None
    passed: Optional[Integer] = None
    skipped: Optional[Integer] = None
    stopped: Optional[Integer] = None
    total: Optional[Integer] = None
    warned: Optional[Integer] = None


class CreateNetworkProfileRequest(BaseModel):
    description: Optional[Message] = None
    downlinkBandwidthBits: Optional[Long] = None
    downlinkDelayMs: Optional[Long] = None
    downlinkJitterMs: Optional[Long] = None
    downlinkLossPercent: Optional[PercentInteger] = None
    name: Name
    projectArn: AmazonResourceName
    type: Optional[NetworkProfileType] = None
    uplinkBandwidthBits: Optional[Long] = None
    uplinkDelayMs: Optional[Long] = None
    uplinkJitterMs: Optional[Long] = None
    uplinkLossPercent: Optional[PercentInteger] = None


class CreateRemoteAccessSessionRequest(BaseModel):
    clientId: Optional[ClientId] = None
    configuration: Optional[CreateRemoteAccessSessionConfiguration] = None
    deviceArn: AmazonResourceName
    instanceArn: Optional[AmazonResourceName] = None
    interactionMode: Optional[InteractionMode] = None
    name: Optional[Name] = None
    projectArn: AmazonResourceName
    remoteDebugEnabled: Optional[Boolean] = None
    remoteRecordAppArn: Optional[AmazonResourceName] = None
    remoteRecordEnabled: Optional[Boolean] = None
    skipAppResign: Optional[Boolean] = None
    sshPublicKey: Optional[SshPublicKey] = None


class CreateTestGridProjectRequest(BaseModel):
    description: Optional[ResourceDescription] = None
    name: ResourceName
    vpcConfig: Optional[TestGridVpcConfig] = None


class CreateTestGridUrlRequest(BaseModel):
    expiresInSeconds: TestGridUrlExpiresInSecondsInput
    projectArn: DeviceFarmArn


class CreateTestGridUrlResult(BaseModel):
    expires: Optional[DateTime] = None
    url: Optional[SensitiveString] = None


class CreateUploadRequest(BaseModel):
    contentType: Optional[ContentType] = None
    name: Name
    projectArn: AmazonResourceName
    type: UploadType


class CreateVPCEConfigurationRequest(BaseModel):
    serviceDnsName: ServiceDnsName
    vpceConfigurationDescription: Optional[VPCEConfigurationDescription] = None
    vpceConfigurationName: VPCEConfigurationName
    vpceServiceName: VPCEServiceName


class DeleteTestGridProjectRequest(BaseModel):
    projectArn: DeviceFarmArn


class DeviceFilterValues(RootModel[List[String]]):
    root: List[String]


class DeviceHostPaths(RootModel[List[String]]):
    root: List[String]


class DeviceMinutes(BaseModel):
    metered: Optional[Double] = None
    total: Optional[Double] = None
    unmetered: Optional[Double] = None


class ExecutionConfiguration(BaseModel):
    accountsCleanup: Optional[AccountsCleanup] = None
    appPackagesCleanup: Optional[AppPackagesCleanup] = None
    jobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    skipAppResign: Optional[SkipAppResign] = None
    videoCapture: Optional[VideoCapture] = None


class GetAccountSettingsResult(BaseModel):
    accountSettings: Optional[AccountSettings] = None


class GetOfferingStatusRequest(BaseModel):
    nextToken: Optional[PaginationToken] = None


class GetTestGridSessionRequest(BaseModel):
    projectArn: Optional[DeviceFarmArn] = None
    sessionArn: Optional[DeviceFarmArn] = None
    sessionId: Optional[ResourceId] = None


class IncompatibilityMessage(BaseModel):
    message: Optional[Message] = None
    type: Optional[DeviceAttribute] = None


class IncompatibilityMessages(RootModel[List[IncompatibilityMessage]]):
    root: List[IncompatibilityMessage]


class InstanceLabels(RootModel[List[String]]):
    root: List[String]


class IosPaths(RootModel[List[String]]):
    root: List[String]


class ListArtifactsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None
    type: ArtifactCategory


class ListArtifactsResult(BaseModel):
    artifacts: Optional[Artifacts] = None
    nextToken: Optional[PaginationToken] = None


class ListDeviceInstancesRequest(BaseModel):
    maxResults: Optional[Integer] = None
    nextToken: Optional[PaginationToken] = None


class ListDevicePoolsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None
    type: Optional[DevicePoolType] = None


class ListInstanceProfilesRequest(BaseModel):
    maxResults: Optional[Integer] = None
    nextToken: Optional[PaginationToken] = None


class ListJobsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListNetworkProfilesRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None
    type: Optional[NetworkProfileType] = None


class ListOfferingPromotionsRequest(BaseModel):
    nextToken: Optional[PaginationToken] = None


class ListOfferingTransactionsRequest(BaseModel):
    nextToken: Optional[PaginationToken] = None


class ListOfferingsRequest(BaseModel):
    nextToken: Optional[PaginationToken] = None


class ListProjectsRequest(BaseModel):
    arn: Optional[AmazonResourceName] = None
    nextToken: Optional[PaginationToken] = None


class ListRemoteAccessSessionsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListRunsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListSamplesRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListSuitesRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListTestGridProjectsRequest(BaseModel):
    maxResult: Optional[MaxPageSize] = None
    nextToken: Optional[PaginationToken] = None


class ListTestGridSessionActionsRequest(BaseModel):
    maxResult: Optional[MaxPageSize] = None
    nextToken: Optional[PaginationToken] = None
    sessionArn: DeviceFarmArn


class ListTestGridSessionActionsResult(BaseModel):
    actions: Optional[TestGridSessionActions] = None
    nextToken: Optional[PaginationToken] = None


class ListTestGridSessionArtifactsRequest(BaseModel):
    maxResult: Optional[MaxPageSize] = None
    nextToken: Optional[PaginationToken] = None
    sessionArn: DeviceFarmArn
    type: Optional[TestGridSessionArtifactCategory] = None


class ListTestGridSessionsRequest(BaseModel):
    creationTimeAfter: Optional[DateTime] = None
    creationTimeBefore: Optional[DateTime] = None
    endTimeAfter: Optional[DateTime] = None
    endTimeBefore: Optional[DateTime] = None
    maxResult: Optional[MaxPageSize] = None
    nextToken: Optional[PaginationToken] = None
    projectArn: DeviceFarmArn
    status: Optional[TestGridSessionStatus] = None


class ListTestsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListUniqueProblemsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None


class ListUploadsRequest(BaseModel):
    arn: AmazonResourceName
    nextToken: Optional[PaginationToken] = None
    type: Optional[UploadType] = None


class ListVPCEConfigurationsRequest(BaseModel):
    maxResults: Optional[Integer] = None
    nextToken: Optional[PaginationToken] = None


class NetworkProfile(BaseModel):
    arn: Optional[AmazonResourceName] = None
    description: Optional[Message] = None
    downlinkBandwidthBits: Optional[Long] = None
    downlinkDelayMs: Optional[Long] = None
    downlinkJitterMs: Optional[Long] = None
    downlinkLossPercent: Optional[PercentInteger] = None
    name: Optional[Name] = None
    type: Optional[NetworkProfileType] = None
    uplinkBandwidthBits: Optional[Long] = None
    uplinkDelayMs: Optional[Long] = None
    uplinkJitterMs: Optional[Long] = None
    uplinkLossPercent: Optional[PercentInteger] = None


class NetworkProfiles(RootModel[List[NetworkProfile]]):
    root: List[NetworkProfile]


class OfferingPromotion(BaseModel):
    description: Optional[Message] = None
    id: Optional[OfferingPromotionIdentifier] = None


class OfferingPromotions(RootModel[List[OfferingPromotion]]):
    root: List[OfferingPromotion]


class PackageIds(RootModel[List[String]]):
    root: List[String]


class RecurringCharge(BaseModel):
    cost: Optional[MonetaryAmount] = None
    frequency: Optional[RecurringChargeFrequency] = None


class RecurringCharges(RootModel[List[RecurringCharge]]):
    root: List[RecurringCharge]


class Rule(BaseModel):
    attribute: Optional[DeviceAttribute] = None
    operator: Optional[RuleOperator] = None
    value: Optional[String] = None


class Rules(RootModel[List[Rule]]):
    root: List[Rule]


class Sample(BaseModel):
    arn: Optional[AmazonResourceName] = None
    type: Optional[SampleType] = None
    url: Optional[URL] = None


class Samples(RootModel[List[Sample]]):
    root: List[Sample]


class ScheduleRunTest(BaseModel):
    filter: Optional[Filter] = None
    parameters: Optional[TestParameters] = None
    testPackageArn: Optional[AmazonResourceName] = None
    testSpecArn: Optional[AmazonResourceName] = None
    type: TestType


class Suite(BaseModel):
    arn: Optional[AmazonResourceName] = None
    counters: Optional[Counters] = None
    created: Optional[DateTime] = None
    deviceMinutes: Optional[DeviceMinutes] = None
    message: Optional[Message] = None
    name: Optional[Name] = None
    result: Optional[ExecutionResult] = None
    started: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    stopped: Optional[DateTime] = None
    type: Optional[TestType] = None


class Suites(RootModel[List[Suite]]):
    root: List[Suite]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=150)


class TagResourceRequest(BaseModel):
    ResourceARN: DeviceFarmArn
    Tags: TagList


class Test(BaseModel):
    arn: Optional[AmazonResourceName] = None
    counters: Optional[Counters] = None
    created: Optional[DateTime] = None
    deviceMinutes: Optional[DeviceMinutes] = None
    message: Optional[Message] = None
    name: Optional[Name] = None
    result: Optional[ExecutionResult] = None
    started: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    stopped: Optional[DateTime] = None
    type: Optional[TestType] = None


class TestGridProject(BaseModel):
    arn: Optional[DeviceFarmArn] = None
    created: Optional[DateTime] = None
    description: Optional[String] = None
    name: Optional[String] = None
    vpcConfig: Optional[TestGridVpcConfig] = None


class TestGridProjects(RootModel[List[TestGridProject]]):
    root: List[TestGridProject]


class TestGridSession(BaseModel):
    arn: Optional[DeviceFarmArn] = None
    billingMinutes: Optional[Double] = None
    created: Optional[DateTime] = None
    ended: Optional[DateTime] = None
    seleniumProperties: Optional[String] = None
    status: Optional[TestGridSessionStatus] = None


class TestGridSessionArtifact(BaseModel):
    filename: Optional[String] = None
    type: Optional[TestGridSessionArtifactType] = None
    url: Optional[SensitiveString] = None


class TestGridSessionArtifacts(RootModel[List[TestGridSessionArtifact]]):
    root: List[TestGridSessionArtifact]


class TestGridSessions(RootModel[List[TestGridSession]]):
    root: List[TestGridSession]


class Tests(RootModel[List[Test]]):
    root: List[Test]


class UpdateDeviceInstanceRequest(BaseModel):
    arn: AmazonResourceName
    labels: Optional[InstanceLabels] = None
    profileArn: Optional[AmazonResourceName] = None


class UpdateDevicePoolRequest(BaseModel):
    arn: AmazonResourceName
    clearMaxDevices: Optional[Boolean] = None
    description: Optional[Message] = None
    maxDevices: Optional[Integer] = None
    name: Optional[Name] = None
    rules: Optional[Rules] = None


class UpdateInstanceProfileRequest(BaseModel):
    arn: AmazonResourceName
    description: Optional[Message] = None
    excludeAppPackagesFromCleanup: Optional[PackageIds] = None
    name: Optional[Name] = None
    packageCleanup: Optional[Boolean] = None
    rebootAfterUse: Optional[Boolean] = None


class UpdateNetworkProfileResult(BaseModel):
    networkProfile: Optional[NetworkProfile] = None


class UpdateTestGridProjectResult(BaseModel):
    testGridProject: Optional[TestGridProject] = None


class UpdateVPCEConfigurationRequest(BaseModel):
    arn: AmazonResourceName
    serviceDnsName: Optional[ServiceDnsName] = None
    vpceConfigurationDescription: Optional[VPCEConfigurationDescription] = None
    vpceConfigurationName: Optional[VPCEConfigurationName] = None
    vpceServiceName: Optional[VPCEServiceName] = None


class Upload(BaseModel):
    arn: Optional[AmazonResourceName] = None
    category: Optional[UploadCategory] = None
    contentType: Optional[ContentType] = None
    created: Optional[DateTime] = None
    message: Optional[Message] = None
    metadata: Optional[Metadata] = None
    name: Optional[Name] = None
    status: Optional[UploadStatus] = None
    type: Optional[UploadType] = None
    url: Optional[SensitiveURL] = None


class Uploads(RootModel[List[Upload]]):
    root: List[Upload]


class VPCEConfiguration(BaseModel):
    arn: Optional[AmazonResourceName] = None
    serviceDnsName: Optional[ServiceDnsName] = None
    vpceConfigurationDescription: Optional[VPCEConfigurationDescription] = None
    vpceConfigurationName: Optional[VPCEConfigurationName] = None
    vpceServiceName: Optional[VPCEServiceName] = None


class VPCEConfigurations(RootModel[List[VPCEConfiguration]]):
    root: List[VPCEConfiguration]


class VpcConfig(BaseModel):
    securityGroupIds: VpcSecurityGroupIds
    subnetIds: VpcSubnetIds
    vpcId: NonEmptyString


class CreateDevicePoolRequest(BaseModel):
    description: Optional[Message] = None
    maxDevices: Optional[Integer] = None
    name: Name
    projectArn: AmazonResourceName
    rules: Rules


class CreateInstanceProfileRequest(BaseModel):
    description: Optional[Message] = None
    excludeAppPackagesFromCleanup: Optional[PackageIds] = None
    name: Name
    packageCleanup: Optional[Boolean] = None
    rebootAfterUse: Optional[Boolean] = None


class CreateNetworkProfileResult(BaseModel):
    networkProfile: Optional[NetworkProfile] = None


class CreateProjectRequest(BaseModel):
    defaultJobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    name: Name
    vpcConfig: Optional[VpcConfig] = None


class CreateTestGridProjectResult(BaseModel):
    testGridProject: Optional[TestGridProject] = None


class CreateUploadResult(BaseModel):
    upload: Optional[Upload] = None


class CreateVPCEConfigurationResult(BaseModel):
    vpceConfiguration: Optional[VPCEConfiguration] = None


class CustomerArtifactPaths(BaseModel):
    androidPaths: Optional[AndroidPaths] = None
    deviceHostPaths: Optional[DeviceHostPaths] = None
    iosPaths: Optional[IosPaths] = None


class DeviceFilter(BaseModel):
    attribute: DeviceFilterAttribute
    operator: RuleOperator
    values: DeviceFilterValues


class DeviceFilters(RootModel[List[DeviceFilter]]):
    root: List[DeviceFilter]


class DevicePool(BaseModel):
    arn: Optional[AmazonResourceName] = None
    description: Optional[Message] = None
    maxDevices: Optional[Integer] = None
    name: Optional[Name] = None
    rules: Optional[Rules] = None
    type: Optional[DevicePoolType] = None


class DevicePools(RootModel[List[DevicePool]]):
    root: List[DevicePool]


class DeviceSelectionConfiguration(BaseModel):
    filters: DeviceFilters
    maxDevices: Integer


class DeviceSelectionResult(BaseModel):
    filters: Optional[DeviceFilters] = None
    matchedDevicesCount: Optional[Integer] = None
    maxDevices: Optional[Integer] = None


class GetDevicePoolResult(BaseModel):
    devicePool: Optional[DevicePool] = None


class GetNetworkProfileResult(BaseModel):
    networkProfile: Optional[NetworkProfile] = None


class GetSuiteResult(BaseModel):
    suite: Optional[Suite] = None


class GetTestGridProjectResult(BaseModel):
    testGridProject: Optional[TestGridProject] = None


class GetTestGridSessionResult(BaseModel):
    testGridSession: Optional[TestGridSession] = None


class GetTestResult(BaseModel):
    test: Optional[Test] = None


class GetUploadResult(BaseModel):
    upload: Optional[Upload] = None


class GetVPCEConfigurationResult(BaseModel):
    vpceConfiguration: Optional[VPCEConfiguration] = None


class InstallToRemoteAccessSessionResult(BaseModel):
    appUpload: Optional[Upload] = None


class InstanceProfile(BaseModel):
    arn: Optional[AmazonResourceName] = None
    description: Optional[Message] = None
    excludeAppPackagesFromCleanup: Optional[PackageIds] = None
    name: Optional[Name] = None
    packageCleanup: Optional[Boolean] = None
    rebootAfterUse: Optional[Boolean] = None


class InstanceProfiles(RootModel[List[InstanceProfile]]):
    root: List[InstanceProfile]


class ListDevicePoolsResult(BaseModel):
    devicePools: Optional[DevicePools] = None
    nextToken: Optional[PaginationToken] = None


class ListDevicesRequest(BaseModel):
    arn: Optional[AmazonResourceName] = None
    filters: Optional[DeviceFilters] = None
    nextToken: Optional[PaginationToken] = None


class ListInstanceProfilesResult(BaseModel):
    instanceProfiles: Optional[InstanceProfiles] = None
    nextToken: Optional[PaginationToken] = None


class ListNetworkProfilesResult(BaseModel):
    networkProfiles: Optional[NetworkProfiles] = None
    nextToken: Optional[PaginationToken] = None


class ListOfferingPromotionsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    offeringPromotions: Optional[OfferingPromotions] = None


class ListSamplesResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    samples: Optional[Samples] = None


class ListSuitesResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    suites: Optional[Suites] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListTestGridProjectsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    testGridProjects: Optional[TestGridProjects] = None


class ListTestGridSessionArtifactsResult(BaseModel):
    artifacts: Optional[TestGridSessionArtifacts] = None
    nextToken: Optional[PaginationToken] = None


class ListTestGridSessionsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    testGridSessions: Optional[TestGridSessions] = None


class ListTestsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    tests: Optional[Tests] = None


class ListUploadsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    uploads: Optional[Uploads] = None


class ListVPCEConfigurationsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    vpceConfigurations: Optional[VPCEConfigurations] = None


class Offering(BaseModel):
    description: Optional[Message] = None
    id: Optional[OfferingIdentifier] = None
    platform: Optional[DevicePlatform] = None
    recurringCharges: Optional[RecurringCharges] = None
    type: Optional[OfferingType] = None


class OfferingStatus(BaseModel):
    effectiveOn: Optional[DateTime] = None
    offering: Optional[Offering] = None
    quantity: Optional[Integer] = None
    type: Optional[OfferingTransactionType] = None


class OfferingStatusMap(RootModel[Optional[Dict[str, OfferingStatus]]]):
    root: Optional[Dict[str, OfferingStatus]] = None


class OfferingTransaction(BaseModel):
    cost: Optional[MonetaryAmount] = None
    createdOn: Optional[DateTime] = None
    offeringPromotionId: Optional[OfferingPromotionIdentifier] = None
    offeringStatus: Optional[OfferingStatus] = None
    transactionId: Optional[TransactionIdentifier] = None


class OfferingTransactions(RootModel[List[OfferingTransaction]]):
    root: List[OfferingTransaction]


class Offerings(RootModel[List[Offering]]):
    root: List[Offering]


class Project(BaseModel):
    arn: Optional[AmazonResourceName] = None
    created: Optional[DateTime] = None
    defaultJobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    name: Optional[Name] = None
    vpcConfig: Optional[VpcConfig] = None


class Projects(RootModel[List[Project]]):
    root: List[Project]


class PurchaseOfferingResult(BaseModel):
    offeringTransaction: Optional[OfferingTransaction] = None


class RenewOfferingResult(BaseModel):
    offeringTransaction: Optional[OfferingTransaction] = None


class Run(BaseModel):
    appUpload: Optional[AmazonResourceName] = None
    arn: Optional[AmazonResourceName] = None
    billingMethod: Optional[BillingMethod] = None
    completedJobs: Optional[Integer] = None
    counters: Optional[Counters] = None
    created: Optional[DateTime] = None
    customerArtifactPaths: Optional[CustomerArtifactPaths] = None
    deviceMinutes: Optional[DeviceMinutes] = None
    devicePoolArn: Optional[AmazonResourceName] = None
    deviceSelectionResult: Optional[DeviceSelectionResult] = None
    eventCount: Optional[Integer] = None
    jobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    locale: Optional[String] = None
    location: Optional[Location] = None
    message: Optional[Message] = None
    name: Optional[Name] = None
    networkProfile: Optional[NetworkProfile] = None
    parsingResultUrl: Optional[String] = None
    platform: Optional[DevicePlatform] = None
    radios: Optional[Radios] = None
    result: Optional[ExecutionResult] = None
    resultCode: Optional[ExecutionResultCode] = None
    seed: Optional[Integer] = None
    skipAppResign: Optional[SkipAppResign] = None
    started: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    stopped: Optional[DateTime] = None
    testSpecArn: Optional[AmazonResourceName] = None
    totalJobs: Optional[Integer] = None
    type: Optional[TestType] = None
    vpcConfig: Optional[VpcConfig] = None
    webUrl: Optional[String] = None


class Runs(RootModel[List[Run]]):
    root: List[Run]


class ScheduleRunConfiguration(BaseModel):
    auxiliaryApps: Optional[AmazonResourceNames] = None
    billingMethod: Optional[BillingMethod] = None
    customerArtifactPaths: Optional[CustomerArtifactPaths] = None
    extraDataPackageArn: Optional[AmazonResourceName] = None
    locale: Optional[String] = None
    location: Optional[Location] = None
    networkProfileArn: Optional[AmazonResourceName] = None
    radios: Optional[Radios] = None
    vpceConfigurationArns: Optional[AmazonResourceNames] = None


class ScheduleRunRequest(BaseModel):
    appArn: Optional[AmazonResourceName] = None
    configuration: Optional[ScheduleRunConfiguration] = None
    devicePoolArn: Optional[AmazonResourceName] = None
    deviceSelectionConfiguration: Optional[DeviceSelectionConfiguration] = None
    executionConfiguration: Optional[ExecutionConfiguration] = None
    name: Optional[Name] = None
    projectArn: AmazonResourceName
    test: ScheduleRunTest


class ScheduleRunResult(BaseModel):
    run: Optional[Run] = None


class StopRunResult(BaseModel):
    run: Optional[Run] = None


class UpdateDevicePoolResult(BaseModel):
    devicePool: Optional[DevicePool] = None


class UpdateInstanceProfileResult(BaseModel):
    instanceProfile: Optional[InstanceProfile] = None


class UpdateProjectRequest(BaseModel):
    arn: AmazonResourceName
    defaultJobTimeoutMinutes: Optional[JobTimeoutMinutes] = None
    name: Optional[Name] = None
    vpcConfig: Optional[VpcConfig] = None


class UpdateProjectResult(BaseModel):
    project: Optional[Project] = None


class UpdateUploadResult(BaseModel):
    upload: Optional[Upload] = None


class UpdateVPCEConfigurationResult(BaseModel):
    vpceConfiguration: Optional[VPCEConfiguration] = None


class CreateDevicePoolResult(BaseModel):
    devicePool: Optional[DevicePool] = None


class CreateInstanceProfileResult(BaseModel):
    instanceProfile: Optional[InstanceProfile] = None


class CreateProjectResult(BaseModel):
    project: Optional[Project] = None


class DeviceInstance(BaseModel):
    arn: Optional[AmazonResourceName] = None
    deviceArn: Optional[AmazonResourceName] = None
    instanceProfile: Optional[InstanceProfile] = None
    labels: Optional[InstanceLabels] = None
    status: Optional[InstanceStatus] = None
    udid: Optional[String] = None


class DeviceInstances(RootModel[List[DeviceInstance]]):
    root: List[DeviceInstance]


class GetDeviceInstanceResult(BaseModel):
    deviceInstance: Optional[DeviceInstance] = None


class GetDevicePoolCompatibilityRequest(BaseModel):
    appArn: Optional[AmazonResourceName] = None
    configuration: Optional[ScheduleRunConfiguration] = None
    devicePoolArn: AmazonResourceName
    test: Optional[ScheduleRunTest] = None
    testType: Optional[TestType] = None


class GetInstanceProfileResult(BaseModel):
    instanceProfile: Optional[InstanceProfile] = None


class GetOfferingStatusResult(BaseModel):
    current: Optional[OfferingStatusMap] = None
    nextPeriod: Optional[OfferingStatusMap] = None
    nextToken: Optional[PaginationToken] = None


class GetProjectResult(BaseModel):
    project: Optional[Project] = None


class GetRunResult(BaseModel):
    run: Optional[Run] = None


class ListDeviceInstancesResult(BaseModel):
    deviceInstances: Optional[DeviceInstances] = None
    nextToken: Optional[PaginationToken] = None


class ListOfferingTransactionsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    offeringTransactions: Optional[OfferingTransactions] = None


class ListOfferingsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    offerings: Optional[Offerings] = None


class ListProjectsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    projects: Optional[Projects] = None


class ListRunsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    runs: Optional[Runs] = None


class UpdateDeviceInstanceResult(BaseModel):
    deviceInstance: Optional[DeviceInstance] = None


class Device(BaseModel):
    arn: Optional[AmazonResourceName] = None
    availability: Optional[DeviceAvailability] = None
    carrier: Optional[String] = None
    cpu: Optional[CPU] = None
    fleetName: Optional[String] = None
    fleetType: Optional[String] = None
    formFactor: Optional[DeviceFormFactor] = None
    heapSize: Optional[Long] = None
    image: Optional[String] = None
    instances: Optional[DeviceInstances] = None
    manufacturer: Optional[String] = None
    memory: Optional[Long] = None
    model: Optional[String] = None
    modelId: Optional[String] = None
    name: Optional[Name] = None
    os: Optional[String] = None
    platform: Optional[DevicePlatform] = None
    radio: Optional[String] = None
    remoteAccessEnabled: Optional[Boolean] = None
    remoteDebugEnabled: Optional[Boolean] = None
    resolution: Optional[Resolution] = None


class DevicePoolCompatibilityResult(BaseModel):
    compatible: Optional[Boolean] = None
    device: Optional[Device] = None
    incompatibilityMessages: Optional[IncompatibilityMessages] = None


class DevicePoolCompatibilityResults(RootModel[List[DevicePoolCompatibilityResult]]):
    root: List[DevicePoolCompatibilityResult]


class Devices(RootModel[List[Device]]):
    root: List[Device]


class GetDevicePoolCompatibilityResult(BaseModel):
    compatibleDevices: Optional[DevicePoolCompatibilityResults] = None
    incompatibleDevices: Optional[DevicePoolCompatibilityResults] = None


class GetDeviceResult(BaseModel):
    device: Optional[Device] = None


class Job(BaseModel):
    arn: Optional[AmazonResourceName] = None
    counters: Optional[Counters] = None
    created: Optional[DateTime] = None
    device: Optional[Device] = None
    deviceMinutes: Optional[DeviceMinutes] = None
    instanceArn: Optional[AmazonResourceName] = None
    message: Optional[Message] = None
    name: Optional[Name] = None
    result: Optional[ExecutionResult] = None
    started: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    stopped: Optional[DateTime] = None
    type: Optional[TestType] = None
    videoCapture: Optional[VideoCapture] = None
    videoEndpoint: Optional[String] = None


class Jobs(RootModel[List[Job]]):
    root: List[Job]


class ListDevicesResult(BaseModel):
    devices: Optional[Devices] = None
    nextToken: Optional[PaginationToken] = None


class ListJobsResult(BaseModel):
    jobs: Optional[Jobs] = None
    nextToken: Optional[PaginationToken] = None


class Problem(BaseModel):
    device: Optional[Device] = None
    job: Optional[ProblemDetail] = None
    message: Optional[Message] = None
    result: Optional[ExecutionResult] = None
    run: Optional[ProblemDetail] = None
    suite: Optional[ProblemDetail] = None
    test: Optional[ProblemDetail] = None


class Problems(RootModel[List[Problem]]):
    root: List[Problem]


class RemoteAccessSession(BaseModel):
    arn: Optional[AmazonResourceName] = None
    billingMethod: Optional[BillingMethod] = None
    clientId: Optional[ClientId] = None
    created: Optional[DateTime] = None
    device: Optional[Device] = None
    deviceMinutes: Optional[DeviceMinutes] = None
    deviceUdid: Optional[String] = None
    endpoint: Optional[String] = None
    hostAddress: Optional[HostAddress] = None
    instanceArn: Optional[AmazonResourceName] = None
    interactionMode: Optional[InteractionMode] = None
    message: Optional[Message] = None
    name: Optional[Name] = None
    remoteDebugEnabled: Optional[Boolean] = None
    remoteRecordAppArn: Optional[AmazonResourceName] = None
    remoteRecordEnabled: Optional[Boolean] = None
    result: Optional[ExecutionResult] = None
    skipAppResign: Optional[SkipAppResign] = None
    started: Optional[DateTime] = None
    status: Optional[ExecutionStatus] = None
    stopped: Optional[DateTime] = None
    vpcConfig: Optional[VpcConfig] = None


class RemoteAccessSessions(RootModel[List[RemoteAccessSession]]):
    root: List[RemoteAccessSession]


class StopJobResult(BaseModel):
    job: Optional[Job] = None


class StopRemoteAccessSessionResult(BaseModel):
    remoteAccessSession: Optional[RemoteAccessSession] = None


class UniqueProblem(BaseModel):
    message: Optional[Message] = None
    problems: Optional[Problems] = None


class UniqueProblems(RootModel[List[UniqueProblem]]):
    root: List[UniqueProblem]


class UniqueProblemsByExecutionResultMap(
    RootModel[Optional[Dict[str, UniqueProblems]]]
):
    root: Optional[Dict[str, UniqueProblems]] = None


class CreateRemoteAccessSessionResult(BaseModel):
    remoteAccessSession: Optional[RemoteAccessSession] = None


class GetJobResult(BaseModel):
    job: Optional[Job] = None


class GetRemoteAccessSessionResult(BaseModel):
    remoteAccessSession: Optional[RemoteAccessSession] = None


class ListRemoteAccessSessionsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    remoteAccessSessions: Optional[RemoteAccessSessions] = None


class ListUniqueProblemsResult(BaseModel):
    nextToken: Optional[PaginationToken] = None
    uniqueProblems: Optional[UniqueProblemsByExecutionResultMap] = None
